name: Tests
on: [push, pull_request]
jobs:
  test:
    name: test-tasks-server-${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [local, objectstorage]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: sh install.sh
      - name: Test with local backup and object storage backup
        run: |
          if [[ "${{ matrix.target }}" == "local" ]]; then
            bun run test
          fi
          if [[ "${{ matrix.target }}" == "objectstorage" ]]; then
            NODE_ENV=production bun run init-db.ts -f
            BACKUP_METHOD_SQLITE="OBJECT_STORAGE" \
            BACKUP_OBJECT_STORAGE_ENDPOINT="https://storage.googleapis.com" \
            BACKUP_OBJECT_STORAGE_ACCESS_KEY="${{ secrets.OBJECT_STORAGE_ACCESS_KEY }}" \
            BACKUP_OBJECT_STORAGE_SECRET_KEY="${{ secrets.OBJECT_STORAGE_SECRET_KEY }}" \
            BACKUP_OBJECT_STORAGE_BUCKET_NAME="${{ vars.OBJECT_STORAGE_BUCKET_NAME }}" \
            BACKUP_OBJECT_STORAGE_PATH="${{ vars.BACKUP_OBJECT_STORAGE_PATH }}" \
            bun --env-file=.env.test test backup
          fi
  build-linux:
    name: build-linux-${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target: [x64, arm64]
    env:
      NODE_ENV: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: sh install.sh
      - name: Initialize database
        run: |
          bun run init-db.ts
          ls -lh .database/tasks.db
          ls -lh .database/tasks-throttle.db
      - name: Compile
        run: |
          if [[ "${{ matrix.target }}" == "x64" ]]; then
            bun build --compile --minify --sourcemap src/main.ts --outfile ./tasks-server
          elif [[ "${{ matrix.target }}" == "arm64" ]]; then
            bun build --compile --target=bun-linux-arm64 --minify --sourcemap src/main.ts --outfile ./tasks-server-arm64
          fi
      - name: Verify output
        run: |
          if [[ "${{ matrix.target }}" == "x64" ]]; then
            ls -lh ./tasks-server
          elif [[ "${{ matrix.target }}" == "arm64" ]]; then
            ls -lh ./tasks-server-arm64
          fi
  build-image:
    name: build-docker-image
    runs-on: ubuntu-latest
    needs: test
    env:
      DOCKER_BUILDKIT: 1
      NODE_ENV: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl
      - name: Setup env
        run: |
          cat .env.example > .env.production
          sed -i "s|9220|9420|" .env.production
          sed -i "s|.database/tasks-dev.db|.database/tasks.db|" .env.production
      - name: Setup docker
        uses: docker/setup-buildx-action@v3
      - name: Setup standalone docker compose
        run: |
          curl -SL -o /usr/local/bin/docker-compose https://github.com/docker/compose/releases/download/v2.32.0/docker-compose-linux-x86_64
          chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
      - name: Compose build and up
        run: docker-compose -p tasks --env-file .env.production up -d --build
      - name: Wait for tasks-server to start
        run: sleep 10
      - name: Test endpoint
        run: |
          STATUS_CODE=$(curl -sL -o /dev/null -w "%{http_code}" http://localhost:9420/status)
          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "OK"
          else
            echo "There was an error"
            exit 1
          fi
      - name: Compose down
        run: docker-compose -p tasks down
        if: ${{ always() }}
